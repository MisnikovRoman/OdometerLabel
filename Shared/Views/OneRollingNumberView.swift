import SwiftUI

struct OneRollingNumberView: View {

    struct Debug {
        var isClipped: Bool
        var showBorder: Bool
        var from: Int
        var to: Int
        var isIncreasing: Bool
        var rounds: Int
        var duration: Double
        var animationToggle: Bool
    }
    
    let target: TargetNumber
    let debug: Debug
    
    init(target: TargetNumber, debug: Debug? = nil) {
        self.target = target
        self.debug = debug ?? .init(isClipped: true, showBorder: false, from: 0, to: 0, isIncreasing: true, rounds: 0, duration: 1.0, animationToggle: false)
    }
    
    @State private var selectedNumber: Int = 0
    private let oneNumberHeight: CGFloat = 20

    var body: some View {
        ZStack {
            ForEach(0...10, id: \.self) { i in
                Text("\(i % 10)")
                    .offset(x: 0, y: CGFloat(i) * oneNumberHeight + totalOffset)
            }
        }
        .clipped(isActive: debug.isClipped)
        .border(Color.red.opacity(debug.showBorder ? 0.2 : 0.0))
        .onChange(of: target) { new in
             smartAnimate(from: target, to: new)
        }
        .onAppear {
             smartAnimate(from: .init(id: target.id, previous: 0, main: 0), to: target)
        }
        .onDisappear {
             smartAnimate(from: target, to: .init(id: target.id, previous: 0, main: 0))
        }
        .onChange(of: debug.animationToggle) { new in
            animate(from: debug.from, to: debug.to, isIncreasing: debug.isIncreasing, fullRoundsCount: debug.rounds, duration: debug.duration, delay: 0)
        }
    }
    
    var totalOffset: CGFloat {
        CGFloat(selectedNumber) * oneNumberHeight * -1
    }
    
    // MARK: - Animation

    /// change 25 -> 369 344
    /// 0 9 -> 34 3 –æ–±–æ—Ä–æ—Ç–∞  0.3
    /// 1 6 -> 3  0.6
    /// 2 3 -> 0  1.0
    func smartAnimate(from oldTarget: TargetNumber, to newTarget: TargetNumber) {
        
        let totalSteps = oldTarget.steps(to: newTarget)
        let totalAnimationTime = 1.0
        let stepDuration = totalAnimationTime / totalSteps.double
        
        let previousDiff = newTarget.previous - oldTarget.previous
        
        if previousDiff == 0 {
            // –¥–µ—Å—è—Ç–∫–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –ø—Ä–æ—Å—Ç–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∫ –Ω–æ–≤–æ–º—É —á–∏—Å–ª—É
            animate(from: oldTarget.main, to: newTarget.main, duration: totalAnimationTime)
        } else if previousDiff < 0 {
//            // –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —á–∏—Å–ª–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å (–Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ 0 –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É)
//            // —É–º–µ–Ω—å—à–∞–µ–º –¥–æ –Ω—É–ª—è
//            let t1 = oldTarget.main.double * stepDuration
//            animate(from: oldTarget.main, to: 0, duration: t1)
//
//            let fullCircleRepeats = 1 + previousDiff
//            let oneLapTime = stepDuration * 10.0
//            let t2 = fullCircleRepeats.double * oneLapTime
//            if fullCircleRepeats < 0 {
//                // —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ª–Ω—ã–π –∫—Ä—É–≥ –∞–Ω–∏–º–∞—Ü–∏–π 9 -> 0
//                animate(from: 10, to: 0, repeatCount: fullCircleRepeats, duration: oneLapTime, delay: t1)
//            }
//
//            // –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –æ—Ç 0 —Å–ø—Ä–∞–≤–∞ (10) –≤ –Ω—É–∂–Ω–æ–µ —á–∏—Å–ª–æ
//            let t3 = (10 - newTarget.main).double * stepDuration
//            animate(from: 10, to: newTarget.main, duration: t3, delay: t1 + t2)
//            print("ID: \(target.id)", t1, t2, t3)
            
            // ‚ö†Ô∏è DELETE
            animate(from: oldTarget.main, to: newTarget.main, duration: totalAnimationTime)
            
        } else if previousDiff == 1 {
            let t1 = stepDuration * (10.0 - oldTarget.main.double)
            animate(from: oldTarget.main, to: 10, duration: t1)
            let t2 = stepDuration * newTarget.main.double
            animate(from: 0, to: newTarget.main, duration: t2, delay: t1)
        } else if previousDiff > 1 {
            // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
            
            let maxFullCircleRepeats = 5
            let fullCircleRepeats = min(previousDiff - 1, maxFullCircleRepeats) // –æ–±—Ä–µ–∑–∞–µ–º –∫–æ–ª-–≤–æ –æ–±–æ—Ä–æ—Ç–æ–≤
             
            let stepsCount1 = 10 - oldTarget.main // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10 (–¥–∞–ª—å–Ω–∏–π –Ω–æ–ª—å)
            let stepsCount2 = 10 * fullCircleRepeats // –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
            let stepsCount3 = newTarget.main // –¥–æ—Ö–æ–¥–∏–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 0
            
            let totalEditedSteps = stepsCount1 + stepsCount2 + stepsCount3 // –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤
            let editedStepDuration = totalAnimationTime / totalEditedSteps.double // –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —à–∞–≥–∞
            
            let t1 = stepsCount1.double * editedStepDuration // –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
            let t2 = stepsCount2.double * editedStepDuration // –≤—Ä–µ–º—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
            let t3 = stepsCount3.double * editedStepDuration // –≤—Ä–µ–º—è —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
            
            animate(from: oldTarget.main, to: 10, duration: t1) //
            animate(from: 0, to: 10, repeatCount: fullCircleRepeats, duration: t2 / fullCircleRepeats.double, delay: t1)
            animate(from: 0, to: newTarget.main, duration: t3, delay: t1 + t2)
            
            print("ID: \(target.id)", t1, t2, t3)
        }
    }
    
    /*
        I want to change number for 1 s

        1_537     ->   3_743
     
        0: 153 7        0: 374 3  1s:
        1:  15 3        1:  37 4  1s:
        2:   1 5        2:   3 7  1s:
        3:   0 1        3:   0 3  1s:
    */
    func simpleAnimate(from: TargetNumber, to: TargetNumber) {
        let previousDiff = to.previous - from.previous
        let basicDuration = 1.0
        
        if previousDiff == 0 {
            animate(from: from.main, to: to.main, duration: basicDuration)
        } else if previousDiff < 0 {
            animate(from: from.main, to: 0, duration: basicDuration / 2)
            animate(from: 10, to: to.main, duration: basicDuration / 2, delay: basicDuration / 2)
        } else if previousDiff > 0 {
            animate(from: from.main, to: 10, duration: basicDuration / 2)
            animate(from: 0, to: to.main, duration: basicDuration / 2, delay: basicDuration)
        }
    }
    
    /// –ü—Ä—è–º–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∫ –¥—Ä—É–≥–æ–º—É
    /// - Parameters:
    ///   - from: –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    ///   - to: –∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    ///   - repeatCount: —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
    ///   - duration: –≤—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    ///   - delay: –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    ///   - curve: –í–∏–¥ –∫—Ä–∏–≤–æ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    func animate(
        from: Int,
        to: Int,
        repeatCount: Int = 1,
        duration: Double,
        delay: Double = 0,
        curve: Animation.Curve = .linear
    ) {
        Animation
            .linear(duration: 0.001)
            .delay(delay)
            .animate { selectedNumber = from }
        Animation
            .curve(curve, duration: duration)
            .repeatCount(repeatCount, autoreverses: false)
            .delay(delay + 0.001)
            .animate {
                print("ü¶â\(target.id) Animate \(from)->\(to) \(duration)sec x\(repeatCount) after \(delay)sec")
                selectedNumber = to
            }
    }
    
    /// –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–ª–∞ –≤—Ä–∞—â–µ–Ω–∏–µ–º –∑–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    /// - Parameters:
    ///   - from: –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    ///   - to: –∫–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ
    ///   - isIncreasing: true - —á–∏—Å–ª–∞ –≤—Ä–∞—â–∞—é—Ç—Å—è –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–≥–æ; false - –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
    ///   - fullRoundsCount: –∫–æ–ª-–≤–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ –æ—Ç 0,1,... -> ...,9,0
    ///   - duration: –æ–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    ///   - delay: –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    func animate(
        from: Int,
        to: Int,
        isIncreasing: Bool,
        fullRoundsCount: Int = 0,
        duration: Double,
        delay: Double = 0
    ) {
        
        let stepsCount1 = isIncreasing
            ? 10 - from // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10 (–¥–∞–ª—å–Ω–∏–π –Ω–æ–ª—å)
            : from      // —É–º–µ–Ω—å—à–∞–µ–º –¥–æ 0 (–±–ª–∏–∂–Ω–∏–π –Ω–æ–ª—å)
        let stepsCount2 = 10 * fullRoundsCount // –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
        let stepsCount3 = isIncreasing
            ? to      // –¥–æ—Ö–æ–¥–∏–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 0
            : 10 - to // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –¥–æ –Ω—É–∂–Ω—É–≥–æ —á–∏—Å–ª–∞ –æ—Ç 10 (–¥–∞–ª—å–Ω–∏–π –Ω–æ–ª—å)
        let totalEditedSteps = stepsCount1 + stepsCount2 + stepsCount3 // –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤
        
        let editedStepDuration = duration / totalEditedSteps.double // –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —à–∞–≥–∞ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –¥—Ä—É–≥–æ–µ)
        
        let t1 = stepsCount1.double * editedStepDuration // –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        let t2 = stepsCount2.double * editedStepDuration // –≤—Ä–µ–º—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        let t3 = stepsCount3.double * editedStepDuration // –≤—Ä–µ–º—è —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        
        if isIncreasing, fullRoundsCount == 0, from < to {
            animate(from: from, to: to, duration: t1 + t2 + t3, curve: .easeInOut)
        } else if !isIncreasing, fullRoundsCount == 0, from > to {
            animate(from: from, to: to, duration: t1 + t2 + t3, curve: .easeInOut)
        } else if isIncreasing {
            animate(from: from, to: 10, duration: t1, curve: .easeIn)
            if fullRoundsCount > 0 {
                animate(from: 0, to: 10, repeatCount: fullRoundsCount, duration: t2 / fullRoundsCount.double, delay: t1)
            }
            animate(from: 0, to: to, duration: t3, delay: t1 + t2, curve: .easeOut)
        } else {
            animate(from: from, to: 0, duration: t1, curve: .easeIn)
            if fullRoundsCount > 0 {
                animate(from: 10, to: 0, repeatCount: fullRoundsCount, duration: t2 / fullRoundsCount.double, delay: t1)
            }
            animate(from: 10, to: to, duration: t3, delay: t1 + t2, curve: .easeOut)
        }
    }
}
