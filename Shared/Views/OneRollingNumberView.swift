import SwiftUI

struct OneRollingNumberView: View {

    struct Debug {
        var isClipped: Bool
        var showBorder: Bool
        var from: Int
        var to: Int
        var isIncreasing: Bool
        var rounds: Int
        var duration: Double
        var animationToggle: Bool
        var delay: Double
    }
    
    let target: TargetNumber
    let settings: RollingNumberLabel.Settings
    let debug: Debug
    
    init(target: TargetNumber, settings: RollingNumberLabel.Settings = .basic, debug: Debug? = nil) {
        self.target = target
        self.settings = settings
        self.debug = debug ?? .init(isClipped: true, showBorder: false, from: 0, to: 0, isIncreasing: true, rounds: 0, duration: 1.0, animationToggle: false, delay: 0.0)
    }
    
    @State private var selectedNumber: Int = 0
    private let oneNumberHeight: CGFloat = 20

    var body: some View {
        ZStack {
            ForEach(0...10, id: \.self) { i in
                Text("\(i % 10)")
                    .offset(x: 0, y: CGFloat(i) * oneNumberHeight + totalOffset)
            }
        }
        .clipped(isActive: debug.isClipped)
        .border(Color.red.opacity(debug.showBorder ? 0.2 : 0.0))
        .onChange(of: target) { new in
             animateWithOneExtraRound(from: target, to: new)
        }
        .onAppear {
            directionalAnimate(
                from: 0,
                to: target.main,
                isIncreasing: true,
                fullRoundsCount: settings.rounds,
                duration: settings.numberAnimationDuration,
                delay: target.id.double * settings.interNumberDelay
            )
        }
        .onDisappear {
            directionalAnimate(
                from: target.main,
                to: 0,
                isIncreasing: false,
                fullRoundsCount: settings.rounds,
                duration: settings.numberAnimationDuration,
                delay: target.id.double * settings.interNumberDelay
            )
        }
        .onChange(of: debug.animationToggle) { new in
            directionalAnimate(from: debug.from, to: debug.to, isIncreasing: debug.isIncreasing, fullRoundsCount: debug.rounds, duration: debug.duration, delay: debug.delay)
        }
    }
    
    var totalOffset: CGFloat {
        CGFloat(selectedNumber) * oneNumberHeight * -1
    }
    
    // MARK: - Animation
    
    /// –ü—Ä—è–º–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ –∫ –¥—Ä—É–≥–æ–º—É
    /// - Parameters:
    ///   - from: –Ω–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    ///   - to: –∫–æ–Ω–µ—á–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ
    ///   - repeatCount: —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é
    ///   - duration: –≤—Ä–µ–º—è –ø–µ—Ä–∏–æ–¥–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    ///   - delay: –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    ///   - curve: –í–∏–¥ –∫—Ä–∏–≤–æ–π –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    func dummyAnimate(
        from: Int,
        to: Int,
        repeatCount: Int = 1,
        duration: Double,
        delay: Double = 0,
        curve: Animation.Curve = .linear
    ) {
        Animation
            .linear(duration: 0.001)
            .delay(delay)
            .animate { selectedNumber = from }
        Animation
            .curve(curve, duration: duration)
            .repeatCount(repeatCount, autoreverses: false)
            .delay(delay + 0.001)
            .animate {
                print("ü¶â\(target.id) Animate \(from)->\(to) \(duration)sec x\(repeatCount) after \(delay)sec")
                selectedNumber = to
            }
    }
    
    /// –ê–Ω–∏–º–∞—Ü–∏—è —á–∏—Å–ª–∞ –≤—Ä–∞—â–µ–Ω–∏–µ–º –∑–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    /// - Parameters:
    ///   - from: –Ω–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ
    ///   - to: –∫–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ
    ///   - isIncreasing: true - —á–∏—Å–ª–∞ –≤—Ä–∞—â–∞—é—Ç—Å—è –æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–≥–æ; false - –≤ –æ–±—Ä–∞—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
    ///   - fullRoundsCount: –∫–æ–ª-–≤–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤ –æ—Ç 0,1,... -> ...,9,0
    ///   - duration: –æ–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏
    ///   - delay: –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞—á–∞–ª–∞ –∞–Ω–∏–º–∞—Ü–∏–∏
    func directionalAnimate(
        from: Int,
        to: Int,
        isIncreasing: Bool,
        fullRoundsCount: Int = 0,
        duration: Double,
        delay: Double = 0
    ) {
        
        let stepsCount1 = isIncreasing
            ? 10 - from // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10 (–¥–∞–ª—å–Ω–∏–π –Ω–æ–ª—å)
            : from      // —É–º–µ–Ω—å—à–∞–µ–º –¥–æ 0 (–±–ª–∏–∂–Ω–∏–π –Ω–æ–ª—å)
        let stepsCount2 = 10 * fullRoundsCount // –¥–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –æ–±–æ—Ä–æ—Ç–æ–≤
        let stepsCount3 = isIncreasing
            ? to      // –¥–æ—Ö–æ–¥–∏–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ —á–∏—Å–ª–∞ –æ—Ç 0
            : 10 - to // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –¥–æ –Ω—É–∂–Ω—É–≥–æ —á–∏—Å–ª–∞ –æ—Ç 10 (–¥–∞–ª—å–Ω–∏–π –Ω–æ–ª—å)
        let totalEditedSteps = stepsCount1 + stepsCount2 + stepsCount3 // –Ω–æ–≤–æ–µ –∫–æ–ª-–≤–æ —à–∞–≥–æ–≤
        
        let editedStepDuration = duration / totalEditedSteps.double // –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —à–∞–≥–∞ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å –æ–¥–Ω–æ–≥–æ —á–∏—Å–ª–∞ –Ω–∞ –¥—Ä—É–≥–æ–µ)
        
        let t1 = stepsCount1.double * editedStepDuration // –≤—Ä–µ–º—è –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        let t2 = stepsCount2.double * editedStepDuration // –≤—Ä–µ–º—è –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        let t3 = stepsCount3.double * editedStepDuration // –≤—Ä–µ–º—è —Ç—Ä–µ—Ç—å–µ–π —á–∞—Å—Ç–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
        
        if isIncreasing, fullRoundsCount == 0, from < to {
            dummyAnimate(from: from, to: to, duration: t1 + t2 + t3, delay: delay, curve: .easeInOut)
        } else if !isIncreasing, fullRoundsCount == 0, from > to {
            dummyAnimate(from: from, to: to, duration: t1 + t2 + t3, delay: delay, curve: .easeInOut)
        } else if isIncreasing {
            dummyAnimate(from: from, to: 10, duration: t1, delay: delay, curve: .easeIn)
            if fullRoundsCount > 0 {
                dummyAnimate(from: 0, to: 10, repeatCount: fullRoundsCount, duration: t2 / fullRoundsCount.double, delay: delay + t1)
            }
            dummyAnimate(from: 0, to: to, duration: t3, delay: delay + t1 + t2, curve: .easeOut)
        } else {
            dummyAnimate(from: from, to: 0, duration: t1, delay: delay, curve: .easeIn)
            if fullRoundsCount > 0 {
                dummyAnimate(from: 10, to: 0, repeatCount: fullRoundsCount, duration: t2 / fullRoundsCount.double, delay: delay + t1)
            }
            dummyAnimate(from: 10, to: to, duration: t3, delay: delay + t1 + t2, curve: .easeOut)
        }
    }
    
    func animateWithOneExtraRound(from oldTarget: TargetNumber, to newTarget: TargetNumber) {
        
        let isIncreasing = newTarget.origin > oldTarget.origin
        let delay = newTarget.id.double * settings.interNumberDelay
        
        directionalAnimate(
            from: oldTarget.main,
            to: newTarget.main,
            isIncreasing: isIncreasing,
            fullRoundsCount: settings.rounds,
            duration: settings.numberAnimationDuration,
            delay: delay
        )
    }
}

